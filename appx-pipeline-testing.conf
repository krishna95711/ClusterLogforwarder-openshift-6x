input {
  pipeline { address => es }
}
filter {
  grok {
    match => { "message" => '%{TIMESTAMP_ISO8601:syslog_ts} +%{HOSTNAME:syslog5424_host} ([a-z\- ]*){([@ :.\-_,{}a-zA-Z0-9\"/]+){"container_id":"(?<app_id>([a-zA-Z0-9-]+))"([@ :.\-_,{}a-zA-Z0-9\"/\[\]=\+]+)"pod_name":"(?<app_instance>([a-zA-Z0-9-]+))"([@ :.\-_,{}a-zA-Z0-9\"/\[\]=\+]+)"structured":(?<details>(.*))}' }
                  }
    if [app_instance] !~ "appx|xfe"{
    drop {}
    }
    if [app_instance] =~ "appx|xfe" {
    json {
      source => "details"
    }
    if [msg] =~ "^ATPF info {.*" {
      grok {
        match => { "msg" => "^ATPF info { format: '%{GREEDYDATA:atp_feed_format}', feed: '%{GREEDYDATA:atp_feed_type}'"}
      }
      mutate {
        update => {"msg" => "ATPF info"}
      }
    }
    if ("_jsonparsefailure" in [tags]) {
      grok {
        match => {
          "details" => "%{GREEDYDATA:error}"
        }
      }
    } else {
      if [err] and ![err][message] {
        mutate {
          rename => {
            "err" => "[tmp][message]"
          }
        }
        mutate {
          rename => {
            "tmp" => "err"
          }
        }
      }
      if [req][headers][true-client-ip] {
        geoip {
          source => "[req][headers][true-client-ip]"
          target => "[req.geoip]"
          fields => ["city_name", "continent_code", "country_name"]
        }
      }
      #If a user email field is dectect then add the domain field
      if [user][email] =~ ".+@.+" {
        mutate {
          add_field => {
            "[user][domain]" => "%{[user][email]}"
          }
        }
      #After copying the email data, remove the part before the first @ character found
        mutate {
          #chop name from email address
          gsub => ["[user][domain]", "^.+@", ""]
        }
      }
      #Copy over fields we need
      if [req] {
        mutate {
          copy => { "[req][url]" => "req.url" }
          copy => { "[req][path]" => "req.path" }
          copy => { "[req][method]" => "req.method" }
        }
        if [req][headers] {
          mutate {
            copy => { "[req][headers][true-client-ip]" => "req.headers.true-client-ip" }
            copy => { "[req][headers][user-agent]" => "req.headers.user-agent"}
            copy => { "[req][headers][x-ui]" => "req.headers.x-ui"}
            copy => { "[req][headers][x-cp4s]" => "req.headers.x-cp4s"}
          }
        }
        if([req.url] =~ /^\/(api\/)?taxii/) {
          mutate { add_field => { "req.endpoint" => "taxii" }}
        } else if ([req.url] =~ /\/comments\//) {
          mutate { add_field => { "req.endpoint" => "comments" }}
        } else if ([req.url] =~ /^\/(api\/)?url\/mobile\//) {
          mutate { add_field => { "req.endpoint" => "url mobile" }}
        } else if ([req.url] =~ /^\/(api\/)?url\/malware\//) {
          mutate { add_field => { "req.endpoint" => "url malware" }}
        } else if ([req.url] =~ /^\/(api\/)?url\//) {
          mutate { add_field => { "req.endpoint" => "url" }}
        } else if ([req.url] =~ /^\/(api\/)?app\//) {
          mutate { add_field => { "req.endpoint" => "app" }}
        } else if ([req.url] =~ /^\/(api\/)?ipr\/history\//) {
          mutate { add_field => { "req.endpoint" => "ipr history" }}
        } else if ([req.url] =~ /^\/(api\/)?ipr\/malware\//) {
          mutate { add_field => { "req.endpoint" => "ipr malware" }}
        } else if ([req.url] =~ /^\/(api\/)?ipr\/asn\//) {
          mutate { add_field => { "req.endpoint" => "ipr asn" }}
        } else if ([req.url] =~ /^\/(api\/)?ipr\//) {
          mutate {  add_field => { "req.endpoint" => "ipr" }}
        } else if ([req.url] =~ /^\/(api\/)?resolve\//) {
          mutate {  add_field => { "req.endpoint" => "resolve" }}
        } else if ([req.url] =~ /^\/(api\/)?malware\/familyext\//) {
          mutate {  add_field => { "req.endpoint" => "malware familyext" }}
        } else if ([req.url] =~ /^\/(api\/)?malware\//) {
          mutate {  add_field => { "req.endpoint" => "malware" }}
        } else if ([req.url] =~ /^\/(api\/)?signature\//) {
          mutate {  add_field => { "req.endpoint" => "signature" }}
        } else if ([req.url] =~ /^\/(api\/)?vulnerabilities\//) {
          mutate {  add_field => { "req.endpoint" => "vulnerabilities" }}
        } else if ([req.url] =~ /^\/(api\/)?casefiles\//) {
          mutate {  add_field => { "req.endpoint" => "casefiles" }}
        } else if ([req.url] =~ /^\/(api\/)?collection\//) {
          mutate {  add_field => { "req.endpoint" => "collection" }}
        } else if ([req.url] =~ /^\/(api\/)?hub\//) {
          mutate {  add_field => { "req.endpoint" => "hub" }}
        }
      }
      prune {
        blacklist_names => ["^caseFile", "^group", "^mail", "^ma_xgs", "^num","req$", "^sbsSubscri","^subscription", "^userDataModel", "^e.originalError", "^e.request", "^info.", "^taxii_11:Inbox_Message", "^taxii_11:Poll_Request", "^history", "^reject.request", "^status$"]
      }
      if [error] {
        json_encode {
          source => "error"
          target => "error"
        }
      }
      if [user] {
        ruby {
          code => "
            event.set('user', {'user' => event.get('user')}) if event.get('user').is_a? String"
        }
      }
      ruby {
        code => "
        event.remove('achievement')
        event.remove('appEnv')
        event.remove('beginTimestamp')
        event.remove('body')
        event.remove('config')
        event.remove('data')
        event.remove('contents')
        event.remove('event')
        event.remove('endTimestamp')
        event.remove('headers')
        event.remove('owner')
        event.remove('recommendations')
        event.remove('sbsEventSummary')
        event.remove('tlpColor')
        event.remove('[user][_json]')
        event.remove('[user][apiKeyName]')
        event.remove('[err][message]')
        event.remove('watson_metrics')"
      }
    }
    mutate {
      remove_field => ["details"]
    }
  } else if [app_instance] =~ "RTR" {
    grok {
      match => { "details" => "%{HOSTNAME:rtr_host} - \[%{TIMESTAMP_ISO8601:timestamp}\] \"%{NOTSPACE:method} %{URIPATHPARAM:path} %{NOTSPACE:protocol} %{NUMBER:router_status} %{NUMBER:request_size} %{NUMBER:response_size}.*response_time:%{NUMBER:response_time} gorouter_time:%{NUMBER:gorouter_time}.*x_cf_routererror:\"%{NOTSPACE:x_cf_routererror}\"%{GREEDYDATA:router_details}"}
    }
    mutate {
     remove_field => ["details"]
     remove_field => ["router_details"]
    }
  } else if [app_instance] =~ "LGR" {
    grok {
      match => { "details" => "%{GREEDYDATA:error}"}
    }
    mutate {
     remove_field => ["details"]
    }
  }
}
output {
  elasticsearch {
    index => "logstash-appx-%{+YYYY.MM.dd}"
    hosts => "elasticsearch-svc.default.svc.cluster.local:9200"
  }
}
